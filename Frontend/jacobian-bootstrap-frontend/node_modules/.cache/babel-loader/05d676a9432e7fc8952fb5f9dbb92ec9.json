{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaked\\\\Desktop\\\\JacobianOnlineMK2\\\\Frontend\\\\jacobian-bootstrap-frontend\\\\src\\\\components\\\\Blog.js\";\nimport React, { Component } from 'react';\n\nclass Blog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/api/displayposts', {\n        method: \"POST\",\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.state = {\n      posts: []\n    };\n  }\n\n  async componentDidMount() {\n    // Call our fetch function below once the component mounts\n    await this.callBackendAPI().then(res => this.setState({\n      posts: res\n    })).catch(err => console.log(err));\n  }\n\n  getPosts() {\n    //this.state.posts = this.state.posts.reverse();\n    return this.state.posts.map(post => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, post.post_title), React.createElement(\"hr\", {\n        class: \"blackbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, formatDate(post.post_date)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, post.post_body), React.createElement(\"img\", {\n        src: post.post_picture,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        class: \"blackbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    });\n  }\n\n  formatDate(date) {\n    var d = new Date(date);\n    var hh = d.getHours();\n    var m = d.getMinutes();\n    var s = d.getSeconds();\n    var dd = \"AM\";\n    var h = hh;\n\n    if (h >= 12) {\n      h = hh - 12;\n      dd = \"PM\";\n    }\n\n    if (h == 0) {\n      h = 12;\n    }\n\n    m = m < 10 ? \"0\" + m : m;\n    s = s < 10 ? \"0\" + s : s;\n    /* if you want 2 digit hours:\r\n    h = h<10?\"0\"+h:h; */\n\n    var pattern = new RegExp(\"0?\" + hh + \":\" + m + \":\" + s);\n    var replacement = h + \":\" + m;\n    /* if you want to add seconds\r\n    replacement += \":\"+s;  */\n\n    replacement += \" \" + dd;\n    return date.replace(pattern, replacement);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Blog\"), React.createElement(\"h1\", {\n      class: \"blinking\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"_\")), React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.getPosts()), React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Blog;","map":{"version":3,"sources":["C:/Users/jaked/Desktop/JacobianOnlineMK2/Frontend/jacobian-bootstrap-frontend/src/components/Blog.js"],"names":["React","Component","Blog","constructor","props","callBackendAPI","response","fetch","method","headers","body","JSON","stringify","state","json","status","Error","message","posts","componentDidMount","then","res","setState","catch","err","console","log","getPosts","map","post","post_title","formatDate","post_date","post_body","post_picture","date","d","Date","hh","getHours","m","getMinutes","s","getSeconds","dd","h","pattern","RegExp","replacement","replace","render"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\n \r\nclass Blog extends Component{\r\n    \r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            posts : []\r\n        };\r\n    }\r\n\r\n    \r\n    async componentDidMount() {\r\n        // Call our fetch function below once the component mounts\r\n      await this.callBackendAPI()\r\n        .then(res => this.setState({ posts: res }))\r\n        .catch(err => console.log(err));\r\n      }\r\n\r\n      callBackendAPI = async () => {\r\n        const response = await fetch('/api/displayposts' , {\r\n          method: \"POST\",\r\n          headers: {\r\n              'Content-type': 'application/json'\r\n          },\r\n          body: JSON.stringify(this.state)\r\n          });\r\n        const body = await response.json();\r\n        if (response.status !== 200) {\r\n          throw Error(body.message) \r\n        }\r\n        return body;\r\n      };\r\n\r\n      getPosts() {\r\n        //this.state.posts = this.state.posts.reverse();\r\n        return this.state.posts.map((post) => {\r\n\r\n\r\n\r\n            return (\r\n                <li>               \r\n                <h2>{post.post_title}</h2>         \r\n                <hr class = \"blackbar\"></hr>\r\n                <h3>{formatDate(post.post_date)}</h3>\r\n                <p>{post.post_body}</p>\r\n                <img src={post.post_picture}></img>\r\n               <hr class = \"blackbar\"></hr>\r\n               <br></br>\r\n               <br></br>\r\n               <br></br>\r\n                </li>\r\n              ); \r\n        });\r\n        }\r\n\r\n        formatDate(date) {\r\n          var d = new Date(date);\r\n          var hh = d.getHours();\r\n          var m = d.getMinutes();\r\n          var s = d.getSeconds();\r\n          var dd = \"AM\";\r\n          var h = hh;\r\n          if (h >= 12) {\r\n            h = hh - 12;\r\n            dd = \"PM\";\r\n          }\r\n          if (h == 0) {\r\n            h = 12;\r\n          }\r\n          m = m < 10 ? \"0\" + m : m;\r\n        \r\n          s = s < 10 ? \"0\" + s : s;\r\n        \r\n          /* if you want 2 digit hours:\r\n          h = h<10?\"0\"+h:h; */\r\n        \r\n          var pattern = new RegExp(\"0?\" + hh + \":\" + m + \":\" + s);\r\n        \r\n          var replacement = h + \":\" + m;\r\n          /* if you want to add seconds\r\n          replacement += \":\"+s;  */\r\n          replacement += \" \" + dd;\r\n        \r\n          return date.replace(pattern, replacement);\r\n        }\r\n        \r\n\r\n \r\nrender() {\r\n    return (\r\n        <div className=\"page\">\r\n        <section>\r\n        <div id = \"heading\">\r\n        <h1>Blog</h1><h1 class = \"blinking\">_</h1>   \r\n        </div>\r\n        <hr class = \"greenbar\"></hr>\r\n        <br></br>\r\n        <br></br>\r\n           <ul>\r\n\r\n            {this.getPosts()}\r\n\r\n           </ul>\r\n           <hr class = \"greenbar\"></hr>\r\n       </section>\r\n       </div>\r\n    );\r\n}\r\n\r\n}\r\n \r\nexport default Blog;"]},"metadata":{},"sourceType":"module"}