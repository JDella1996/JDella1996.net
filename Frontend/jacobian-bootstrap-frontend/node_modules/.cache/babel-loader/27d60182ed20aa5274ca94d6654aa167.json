{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaked\\\\Desktop\\\\JacobianOnlineMK2\\\\Frontend\\\\jacobian-bootstrap-frontend\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from 'react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/api/displayquotes', {\n        method: \"POST\",\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.state = {\n      quotes: []\n    };\n  }\n\n  async componentDidMount() {\n    // Call our fetch function below once the component mounts\n    await this.callBackendAPI().then(res => this.setState({\n      quotes: res\n    })).catch(err => console.log(err));\n  }\n\n  getQuotes() {\n    let RandomQuote = this.state.quotes[Math.floor(Math.random() * this.state.quotes.length)];\n    let Triggered = false;\n    return this.state.quotes.map(quote => {\n      if (quote == RandomQuote & Triggered == false) {\n        Triggered = true;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"frontpage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"Random quote of the day\"), quote.quote_author, \" - \\\"\", quote.quote_contents, \"\\\"\"));\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Home\"), React.createElement(\"h1\", {\n      class: \"blinking\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"_\")), React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.getQuotes()), React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/jaked/Desktop/JacobianOnlineMK2/Frontend/jacobian-bootstrap-frontend/src/components/Home.js"],"names":["React","Component","Home","constructor","props","callBackendAPI","response","fetch","method","headers","body","JSON","stringify","state","json","status","Error","message","quotes","componentDidMount","then","res","setState","catch","err","console","log","getQuotes","RandomQuote","Math","floor","random","length","Triggered","map","quote","quote_author","quote_contents","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA4B;AAExBE,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;;AADJ,SAeEC,cAfF,GAemB,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAD,EAAwB;AAClDC,QAAAA,MAAM,EAAE,MAD0C;AAElDC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFyC;AAKlDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAKC,KAApB;AAL4C,OAAxB,CAA5B;AAOA,YAAMH,IAAI,GAAG,MAAMJ,QAAQ,CAACQ,IAAT,EAAnB;;AAEA,UAAIR,QAAQ,CAACS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAMC,KAAK,CAACN,IAAI,CAACO,OAAN,CAAX;AACD;;AACD,aAAOP,IAAP;AACD,KA7BH;;AAEI,SAAKG,KAAL,GAAa;AACTK,MAAAA,MAAM,EAAG;AADA,KAAb;AAGH;;AAGD,QAAMC,iBAAN,GAA0B;AACtB;AACF,UAAM,KAAKd,cAAL,GACHe,IADG,CACEC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEJ,MAAAA,MAAM,EAAEG;AAAV,KAAd,CADT,EAEHE,KAFG,CAEGC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFV,CAAN;AAGC;;AAkBDG,EAAAA,SAAS,GAAG;AACV,QAAIC,WAAW,GAAG,KAAKf,KAAL,CAAWK,MAAX,CAAkBW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKlB,KAAL,CAAWK,MAAX,CAAkBc,MAA7C,CAAlB,CAAlB;AACA,QAAIC,SAAS,GAAG,KAAhB;AACA,WAAO,KAAKpB,KAAL,CAAWK,MAAX,CAAkBgB,GAAlB,CAAuBC,KAAD,IAAW;AACxC,UAAIA,KAAK,IAAKP,WAAV,GAAwBK,SAAS,IAAI,KAAzC,EAA+C;AAC3CA,QAAAA,SAAS,GAAG,IAAZ;AACA,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAI,UAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEGE,KAAK,CAACC,YAFT,WAE2BD,KAAK,CAACE,cAFjC,OADA,CAFJ;AAWH;AAEA,KAhBM,CAAP;AAiBD;;AASHC,EAAAA,MAAM,GAAE;AACR,WAEI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACtB;AAAK,MAAA,EAAE,EAAG,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EACa;AAAI,MAAA,KAAK,EAAG,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADb,CADsB,EAItB;AAAI,MAAA,KAAK,EAAG,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJsB,EAKtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKX,SAAL,EAAL,CALsB,EAMtB;AAAI,MAAA,KAAK,EAAG,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANsB,CAAtB,CAFJ;AAYC;;AA5EuB;;AAgF5B,eAAezB,IAAf","sourcesContent":["import React,{Component} from 'react';\r\n \r\nclass Home extends Component{\r\n    \r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            quotes : []\r\n        };\r\n    }\r\n\r\n    \r\n    async componentDidMount() {\r\n        // Call our fetch function below once the component mounts\r\n      await this.callBackendAPI()\r\n        .then(res => this.setState({ quotes: res }))\r\n        .catch(err => console.log(err));\r\n      }\r\n\r\n      callBackendAPI = async () => {\r\n        const response = await fetch('/api/displayquotes' , {\r\n          method: \"POST\",\r\n          headers: {\r\n              'Content-type': 'application/json'\r\n          },\r\n          body: JSON.stringify(this.state)\r\n          });\r\n        const body = await response.json();\r\n  \r\n        if (response.status !== 200) {\r\n          throw Error(body.message) \r\n        }\r\n        return body;\r\n      };\r\n\r\n      getQuotes() {\r\n        let RandomQuote = this.state.quotes[Math.floor(Math.random() * this.state.quotes.length)];\r\n        let Triggered = false;\r\n        return this.state.quotes.map((quote) => {\r\n        if (quote  == RandomQuote & Triggered == false){\r\n            Triggered = true;\r\n            return (\r\n\r\n                <div>\r\n                <h4 className='frontpage'>\r\n                    <h3>Random quote of the day</h3>\r\n                  {quote.quote_author} - \"{quote.quote_contents}\" \r\n                \r\n                        \r\n                 </h4>\r\n                  </div>\r\n              ); \r\n        }\r\n\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n   \r\n\r\n    \r\n    \r\n    render(){\r\n    return (\r\n \r\n        <div className=\"page\"><section>\r\n        <div id = \"heading\">\r\n        <h1>Home</h1><h1 class = \"blinking\">_</h1>   \r\n        </div> \r\n        <hr class = \"greenbar\"></hr>\r\n        <h1>{this.getQuotes()}</h1>\r\n        <hr class = \"greenbar\"></hr>\r\n        </section>\r\n       </div>\r\n        );\r\n    }\r\n\r\n}\r\n \r\nexport default Home;"]},"metadata":{},"sourceType":"module"}